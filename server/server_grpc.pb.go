// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: server.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MeanderClientIO_CreateClient_FullMethodName  = "/MeanderClientIO/CreateClient"
	MeanderClientIO_ConnectClient_FullMethodName = "/MeanderClientIO/ConnectClient"
	MeanderClientIO_ValidateToken_FullMethodName = "/MeanderClientIO/ValidateToken"
)

// MeanderClientIOClient is the client API for MeanderClientIO service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MeanderClientIOClient interface {
	CreateClient(ctx context.Context, in *ClientPayload, opts ...grpc.CallOption) (*Client, error)
	ConnectClient(ctx context.Context, in *ClientPayload, opts ...grpc.CallOption) (*Connection, error)
	ValidateToken(ctx context.Context, in *ConnectionPayload, opts ...grpc.CallOption) (*Commit, error)
}

type meanderClientIOClient struct {
	cc grpc.ClientConnInterface
}

func NewMeanderClientIOClient(cc grpc.ClientConnInterface) MeanderClientIOClient {
	return &meanderClientIOClient{cc}
}

func (c *meanderClientIOClient) CreateClient(ctx context.Context, in *ClientPayload, opts ...grpc.CallOption) (*Client, error) {
	out := new(Client)
	err := c.cc.Invoke(ctx, MeanderClientIO_CreateClient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meanderClientIOClient) ConnectClient(ctx context.Context, in *ClientPayload, opts ...grpc.CallOption) (*Connection, error) {
	out := new(Connection)
	err := c.cc.Invoke(ctx, MeanderClientIO_ConnectClient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meanderClientIOClient) ValidateToken(ctx context.Context, in *ConnectionPayload, opts ...grpc.CallOption) (*Commit, error) {
	out := new(Commit)
	err := c.cc.Invoke(ctx, MeanderClientIO_ValidateToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeanderClientIOServer is the server API for MeanderClientIO service.
// All implementations must embed UnimplementedMeanderClientIOServer
// for forward compatibility
type MeanderClientIOServer interface {
	CreateClient(context.Context, *ClientPayload) (*Client, error)
	ConnectClient(context.Context, *ClientPayload) (*Connection, error)
	ValidateToken(context.Context, *ConnectionPayload) (*Commit, error)
	mustEmbedUnimplementedMeanderClientIOServer()
}

// UnimplementedMeanderClientIOServer must be embedded to have forward compatible implementations.
type UnimplementedMeanderClientIOServer struct {
}

func (UnimplementedMeanderClientIOServer) CreateClient(context.Context, *ClientPayload) (*Client, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClient not implemented")
}
func (UnimplementedMeanderClientIOServer) ConnectClient(context.Context, *ClientPayload) (*Connection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectClient not implemented")
}
func (UnimplementedMeanderClientIOServer) ValidateToken(context.Context, *ConnectionPayload) (*Commit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateToken not implemented")
}
func (UnimplementedMeanderClientIOServer) mustEmbedUnimplementedMeanderClientIOServer() {}

// UnsafeMeanderClientIOServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MeanderClientIOServer will
// result in compilation errors.
type UnsafeMeanderClientIOServer interface {
	mustEmbedUnimplementedMeanderClientIOServer()
}

func RegisterMeanderClientIOServer(s grpc.ServiceRegistrar, srv MeanderClientIOServer) {
	s.RegisterService(&MeanderClientIO_ServiceDesc, srv)
}

func _MeanderClientIO_CreateClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeanderClientIOServer).CreateClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeanderClientIO_CreateClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeanderClientIOServer).CreateClient(ctx, req.(*ClientPayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeanderClientIO_ConnectClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeanderClientIOServer).ConnectClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeanderClientIO_ConnectClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeanderClientIOServer).ConnectClient(ctx, req.(*ClientPayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeanderClientIO_ValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectionPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeanderClientIOServer).ValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeanderClientIO_ValidateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeanderClientIOServer).ValidateToken(ctx, req.(*ConnectionPayload))
	}
	return interceptor(ctx, in, info, handler)
}

// MeanderClientIO_ServiceDesc is the grpc.ServiceDesc for MeanderClientIO service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MeanderClientIO_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MeanderClientIO",
	HandlerType: (*MeanderClientIOServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateClient",
			Handler:    _MeanderClientIO_CreateClient_Handler,
		},
		{
			MethodName: "ConnectClient",
			Handler:    _MeanderClientIO_ConnectClient_Handler,
		},
		{
			MethodName: "ValidateToken",
			Handler:    _MeanderClientIO_ValidateToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}
