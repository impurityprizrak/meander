// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: server.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MeanderIO_CreateClient_FullMethodName   = "/MeanderIO/CreateClient"
	MeanderIO_ConnectClient_FullMethodName  = "/MeanderIO/ConnectClient"
	MeanderIO_ValidateToken_FullMethodName  = "/MeanderIO/ValidateToken"
	MeanderIO_RegisterClient_FullMethodName = "/MeanderIO/RegisterClient"
	MeanderIO_RegisterNode_FullMethodName   = "/MeanderIO/RegisterNode"
)

// MeanderIOClient is the client API for MeanderIO service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MeanderIOClient interface {
	CreateClient(ctx context.Context, in *ClientPayload, opts ...grpc.CallOption) (*Client, error)
	ConnectClient(ctx context.Context, in *ClientPayload, opts ...grpc.CallOption) (*Connection, error)
	ValidateToken(ctx context.Context, in *ConnectionPayload, opts ...grpc.CallOption) (*Commit, error)
	RegisterClient(ctx context.Context, in *Client, opts ...grpc.CallOption) (*Commit, error)
	RegisterNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Commit, error)
}

type meanderIOClient struct {
	cc grpc.ClientConnInterface
}

func NewMeanderIOClient(cc grpc.ClientConnInterface) MeanderIOClient {
	return &meanderIOClient{cc}
}

func (c *meanderIOClient) CreateClient(ctx context.Context, in *ClientPayload, opts ...grpc.CallOption) (*Client, error) {
	out := new(Client)
	err := c.cc.Invoke(ctx, MeanderIO_CreateClient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meanderIOClient) ConnectClient(ctx context.Context, in *ClientPayload, opts ...grpc.CallOption) (*Connection, error) {
	out := new(Connection)
	err := c.cc.Invoke(ctx, MeanderIO_ConnectClient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meanderIOClient) ValidateToken(ctx context.Context, in *ConnectionPayload, opts ...grpc.CallOption) (*Commit, error) {
	out := new(Commit)
	err := c.cc.Invoke(ctx, MeanderIO_ValidateToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meanderIOClient) RegisterClient(ctx context.Context, in *Client, opts ...grpc.CallOption) (*Commit, error) {
	out := new(Commit)
	err := c.cc.Invoke(ctx, MeanderIO_RegisterClient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meanderIOClient) RegisterNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Commit, error) {
	out := new(Commit)
	err := c.cc.Invoke(ctx, MeanderIO_RegisterNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeanderIOServer is the server API for MeanderIO service.
// All implementations must embed UnimplementedMeanderIOServer
// for forward compatibility
type MeanderIOServer interface {
	CreateClient(context.Context, *ClientPayload) (*Client, error)
	ConnectClient(context.Context, *ClientPayload) (*Connection, error)
	ValidateToken(context.Context, *ConnectionPayload) (*Commit, error)
	RegisterClient(context.Context, *Client) (*Commit, error)
	RegisterNode(context.Context, *Node) (*Commit, error)
	mustEmbedUnimplementedMeanderIOServer()
}

// UnimplementedMeanderIOServer must be embedded to have forward compatible implementations.
type UnimplementedMeanderIOServer struct {
}

func (UnimplementedMeanderIOServer) CreateClient(context.Context, *ClientPayload) (*Client, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClient not implemented")
}
func (UnimplementedMeanderIOServer) ConnectClient(context.Context, *ClientPayload) (*Connection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectClient not implemented")
}
func (UnimplementedMeanderIOServer) ValidateToken(context.Context, *ConnectionPayload) (*Commit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateToken not implemented")
}
func (UnimplementedMeanderIOServer) RegisterClient(context.Context, *Client) (*Commit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterClient not implemented")
}
func (UnimplementedMeanderIOServer) RegisterNode(context.Context, *Node) (*Commit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNode not implemented")
}
func (UnimplementedMeanderIOServer) mustEmbedUnimplementedMeanderIOServer() {}

// UnsafeMeanderIOServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MeanderIOServer will
// result in compilation errors.
type UnsafeMeanderIOServer interface {
	mustEmbedUnimplementedMeanderIOServer()
}

func RegisterMeanderIOServer(s grpc.ServiceRegistrar, srv MeanderIOServer) {
	s.RegisterService(&MeanderIO_ServiceDesc, srv)
}

func _MeanderIO_CreateClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeanderIOServer).CreateClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeanderIO_CreateClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeanderIOServer).CreateClient(ctx, req.(*ClientPayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeanderIO_ConnectClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeanderIOServer).ConnectClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeanderIO_ConnectClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeanderIOServer).ConnectClient(ctx, req.(*ClientPayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeanderIO_ValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectionPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeanderIOServer).ValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeanderIO_ValidateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeanderIOServer).ValidateToken(ctx, req.(*ConnectionPayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeanderIO_RegisterClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Client)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeanderIOServer).RegisterClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeanderIO_RegisterClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeanderIOServer).RegisterClient(ctx, req.(*Client))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeanderIO_RegisterNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeanderIOServer).RegisterNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeanderIO_RegisterNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeanderIOServer).RegisterNode(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

// MeanderIO_ServiceDesc is the grpc.ServiceDesc for MeanderIO service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MeanderIO_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MeanderIO",
	HandlerType: (*MeanderIOServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateClient",
			Handler:    _MeanderIO_CreateClient_Handler,
		},
		{
			MethodName: "ConnectClient",
			Handler:    _MeanderIO_ConnectClient_Handler,
		},
		{
			MethodName: "ValidateToken",
			Handler:    _MeanderIO_ValidateToken_Handler,
		},
		{
			MethodName: "RegisterClient",
			Handler:    _MeanderIO_RegisterClient_Handler,
		},
		{
			MethodName: "RegisterNode",
			Handler:    _MeanderIO_RegisterNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}
